from zipfile import ZIP_DEFLATED
from zipfile import ZipFile
import streamlit as st
import streamlit.components.v1 as components
from checks import checkPypiRocrate, checkValidator, checkParamMetadataJson, checkSchema

st.set_page_config(page_title=".eln file checker", layout="wide")

# Increase default font size
st.markdown("""
<style>
    .stApp {font-size: 20px;}
    .stMarkdown p, .stMarkdown li {font-size: 20px;}
    [data-testid="stFileUploader"] * {font-size: 20px !important;}
    [data-testid="stExpander"] * {font-size: 20px !important;}
</style>
""", unsafe_allow_html=True)
col1, col2 = st.columns([0.7, 0.3])
col1.markdown('## Tools for the .eln file')
col1.markdown('The ELN file format is an archive format for exchange of experimental results and data. '
                'This file format can be created and read by software such as Electronic Laboratory Notebooks. '
                'For more information visit [link](https://github.com/TheELNConsortium/TheELNFileFormat).')
col1.markdown('1. Verify easily if a file conforms to the .eln format and validate that the file is not corrupt.')
col1.markdown('2. Preview the content of a .eln file. This preview was generated by the software that created the .eln file.')
col2.image('logo-color-fade.png', width=200)

uploaded_file = st.file_uploader("Choose an .eln-file for verification and preview", type=['eln'])
if uploaded_file is not None:
    st.markdown("""
    <style>
    .stTabs [data-baseweb="tab-list"] button [data-testid="stMarkdownContainer"] p {
        font-size: 36px;
    }
    </style>
    """, unsafe_allow_html=True)
    tabVerify, tabPreview = st.tabs(["Verify", "Preview"])

    with tabVerify:
        st.markdown("### Test summary:")
        success, output = checkPypiRocrate(uploaded_file)
        with st.expander(("Success:" if success else "FAILURE:")+" Pypi RO-Crate", icon='✅' if success else '❌'):
            st.code('Success' if success else output)
        success, output = checkValidator(uploaded_file)
        with st.expander(("Success:" if success else "FAILURE:")+" Validator", icon='✅' if success else '❌'):
            st.code('Success' if success else output)
        success, output = checkParamMetadataJson(uploaded_file)
        with st.expander(("Success:" if success else "FAILURE:")+" Parameters Metadata Json", icon='✅' if success else '❌'):
            st.code('Success' if success else output)
        success, output = checkSchema(uploaded_file)
        with st.expander(("Success:" if success else "FAILURE:")+" Schema", icon='✅' if success else '❌'):
            st.code('Success' if success else output)

    with tabPreview:
        with ZipFile(uploaded_file, 'r', compression=ZIP_DEFLATED) as elnFile:
            htmlFile = [i for i in elnFile.namelist() if i.endswith('ro-crate-preview.html')][0]
            htmlStr  = elnFile.read(htmlFile).decode('utf-8')
            components.html(htmlStr, height=800, width="100%", scrolling=True)
